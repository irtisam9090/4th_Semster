from collections import deque

def waterJugProblemDFS(capacity1, capacity2, goal):
    stack = [(0, 0)]
    visited = set()
    path = []

    while stack:
        jug1, jug2 = stack.pop()
        
        if (jug1, jug2) in visited:
            continue
        
        visited.add((jug1, jug2))
        path.append((jug1, jug2))

        if jug1 == goal or jug2 == goal:
            print("Solution Found")
            for action in path:
                print(action)
            return True

        rules = [
            (capacity1, jug2),
            (jug1, capacity2),
            (0, jug2),
            (jug1, 0),
            (min(capacity1, jug1 + jug2), max(0, jug2 - (capacity1 - jug1))),
            (max(0, jug1 - (capacity2 - jug2)), min(capacity2, jug1 + jug2)),
        ]

        for state in rules:
            if state not in visited:
                stack.append(state)
    
    print("No Solution Found")
    return False

jug1Capacity = 4
jug2Capacity = 3
target = 2

waterJugProblemDFS(jug1Capacity, jug2Capacity, target)
